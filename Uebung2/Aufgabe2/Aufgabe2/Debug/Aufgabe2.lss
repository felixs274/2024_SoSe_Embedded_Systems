
Aufgabe2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000022c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  000002a0  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001b3  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000010b  00000000  00000000  000004bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001a2  00000000  00000000  000005c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000084  00000000  00000000  00000768  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ce  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000d3  00000000  00000000  000009ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00000a8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_4>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  88:	0c 94 14 01 	jmp	0x228	; 0x228 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_1>:

uint8_t buttonStates = 0;	//0: Reset, (1: Start (inactive))
uint8_t timerEnabled = 0;
uint8_t maxCounter = 0;
uint8_t counter = 0;
ISR(INT0_vect) { timerEnabled = 1; }
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	80 93 02 01 	sts	0x0102, r24
  a2:	8f 91       	pop	r24
  a4:	0f 90       	pop	r0
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	0f 90       	pop	r0
  aa:	1f 90       	pop	r1
  ac:	18 95       	reti

000000ae <__vector_4>:

ISR(PCINT1_vect) { buttonStates |= 1 << 0; }
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	80 91 03 01 	lds	r24, 0x0103
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	80 93 03 01 	sts	0x0103, r24
  c4:	8f 91       	pop	r24
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <__vector_5>:

ISR(PCINT2_vect) { counter = maxCounter; }
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
  dc:	80 91 01 01 	lds	r24, 0x0101
  e0:	80 93 00 01 	sts	0x0100, r24
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <main>:
int main(void) {

	uint8_t switchStates = 0;	//0: 2^0, 1: 2^1, 2: 2^2
	uint8_t mask = 0b00000111; // Create mask for the first 3 bits
	//counter = maxCounter;
	DDRC |= (1 << DDC2) | (1 << DDC1) | (1 << DDC0);							// LED Outputs
  f0:	87 b1       	in	r24, 0x07	; 7
  f2:	87 60       	ori	r24, 0x07	; 7
  f4:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC3);														// Reset Button Pull-up
  f6:	43 9a       	sbi	0x08, 3	; 8
	PORTD |= (1 << PORTD2) | (1 << PORTD5) | (1 << PORTD6) | (1 << PORTD7);		// Start Button / Switches Pull-ups
  f8:	8b b1       	in	r24, 0x0b	; 11
  fa:	84 6e       	ori	r24, 0xE4	; 228
  fc:	8b b9       	out	0x0b, r24	; 11
	//INT0 setup
	EICRA &= ~((1<<ISC01)|(1<<ISC00));
  fe:	e9 e6       	ldi	r30, 0x69	; 105
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	8c 7f       	andi	r24, 0xFC	; 252
 106:	80 83       	st	Z, r24
	EICRA |= (1<<ISC01);
 108:	80 81       	ld	r24, Z
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);
 10e:	e8 9a       	sbi	0x1d, 0	; 29
	//PCINT1 setup
	PCICR &= ~((1<<PCIE2)|(1<<PCIE1)|(1<<PCIE2));
 110:	e8 e6       	ldi	r30, 0x68	; 104
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	89 7f       	andi	r24, 0xF9	; 249
 118:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE1);
 11a:	80 81       	ld	r24, Z
 11c:	82 60       	ori	r24, 0x02	; 2
 11e:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT11);
 120:	ac e6       	ldi	r26, 0x6C	; 108
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	8c 91       	ld	r24, X
 126:	88 60       	ori	r24, 0x08	; 8
 128:	8c 93       	st	X, r24
	//PCINT2 setup
	DDRD |= (1<<PORTD4);														// PCINT20
 12a:	54 9a       	sbi	0x0a, 4	; 10
	PCICR |= (1<<PCIE2);
 12c:	80 81       	ld	r24, Z
 12e:	84 60       	ori	r24, 0x04	; 4
 130:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT20);
 132:	ed e6       	ldi	r30, 0x6D	; 109
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	80 61       	ori	r24, 0x10	; 16
 13a:	80 83       	st	Z, r24
	
	sei();
 13c:	78 94       	sei

ISR(PCINT2_vect) { counter = maxCounter; }

int main(void) {

	uint8_t switchStates = 0;	//0: 2^0, 1: 2^1, 2: 2^2
 13e:	f0 e0       	ldi	r31, 0x00	; 0
	
	sei();
	
	while(1) {
		
		if (counter <= 0) PORTD ^= (1<<PORTD4);									// Toggle PCINT20
 140:	e0 e1       	ldi	r30, 0x10	; 16
		if(timerEnabled) counter--;
		PORTC = (PORTC & ~mask) | ~((counter - 1) / 10);
 142:	2a e0       	ldi	r18, 0x0A	; 10
 144:	30 e0       	ldi	r19, 0x00	; 0
	
	sei();
	
	while(1) {
		
		if (counter <= 0) PORTD ^= (1<<PORTD4);									// Toggle PCINT20
 146:	80 91 00 01 	lds	r24, 0x0100
 14a:	81 11       	cpse	r24, r1
 14c:	03 c0       	rjmp	.+6      	; 0x154 <main+0x64>
 14e:	8b b1       	in	r24, 0x0b	; 11
 150:	8e 27       	eor	r24, r30
 152:	8b b9       	out	0x0b, r24	; 11
		if(timerEnabled) counter--;
 154:	80 91 02 01 	lds	r24, 0x0102
 158:	88 23       	and	r24, r24
 15a:	29 f0       	breq	.+10     	; 0x166 <main+0x76>
 15c:	80 91 00 01 	lds	r24, 0x0100
 160:	81 50       	subi	r24, 0x01	; 1
 162:	80 93 00 01 	sts	0x0100, r24
		PORTC = (PORTC & ~mask) | ~((counter - 1) / 10);
 166:	48 b1       	in	r20, 0x08	; 8
 168:	80 91 00 01 	lds	r24, 0x0100
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	b9 01       	movw	r22, r18
 172:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <__divmodhi4>
 176:	60 95       	com	r22
 178:	48 7f       	andi	r20, 0xF8	; 248
 17a:	46 2b       	or	r20, r22
 17c:	48 b9       	out	0x08, r20	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	4f ef       	ldi	r20, 0xFF	; 255
 180:	81 ee       	ldi	r24, 0xE1	; 225
 182:	94 e0       	ldi	r25, 0x04	; 4
 184:	41 50       	subi	r20, 0x01	; 1
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <main+0x94>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x9e>
 18e:	00 00       	nop
		_delay_ms(100);
		
		// Reset Counter and Stop
		if (buttonStates & (1 << 0)) {
 190:	80 91 03 01 	lds	r24, 0x0103
 194:	80 ff       	sbrs	r24, 0
 196:	d7 cf       	rjmp	.-82     	; 0x146 <main+0x56>
			if (PIND & (1 << PIND5)) switchStates |= 1 << 0;
 198:	4d 9b       	sbis	0x09, 5	; 9
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <main+0xb0>
 19c:	f1 60       	ori	r31, 0x01	; 1
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <main+0xb2>
			else switchStates &= ~(1 << 0);
 1a0:	fe 7f       	andi	r31, 0xFE	; 254
			if (PIND & (1 << PIND6)) switchStates |= 1 << 1;
 1a2:	4e 9b       	sbis	0x09, 6	; 9
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <main+0xba>
 1a6:	f2 60       	ori	r31, 0x02	; 2
 1a8:	01 c0       	rjmp	.+2      	; 0x1ac <main+0xbc>
			else switchStates &= ~(1 << 1);
 1aa:	fd 7f       	andi	r31, 0xFD	; 253
			if (PIND & (1 << PIND7)) switchStates |= 1 << 2;
 1ac:	4f 9b       	sbis	0x09, 7	; 9
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <main+0xc4>
 1b0:	f4 60       	ori	r31, 0x04	; 4
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <main+0xc6>
			else switchStates &= ~(1 << 2);
 1b4:	fb 7f       	andi	r31, 0xFB	; 251
			maxCounter = (switchStates*10)+10;
 1b6:	9f 2f       	mov	r25, r31
 1b8:	99 0f       	add	r25, r25
 1ba:	9e 5f       	subi	r25, 0xFE	; 254
 1bc:	49 2f       	mov	r20, r25
 1be:	44 0f       	add	r20, r20
 1c0:	44 0f       	add	r20, r20
 1c2:	94 0f       	add	r25, r20
 1c4:	90 93 01 01 	sts	0x0101, r25
			buttonStates &= ~(1 << 0);
 1c8:	8e 7f       	andi	r24, 0xFE	; 254
 1ca:	80 93 03 01 	sts	0x0103, r24
			counter = maxCounter;
 1ce:	90 93 00 01 	sts	0x0100, r25
			timerEnabled = 0;
 1d2:	10 92 02 01 	sts	0x0102, r1
 1d6:	b7 cf       	rjmp	.-146    	; 0x146 <main+0x56>

000001d8 <__divmodhi4>:
 1d8:	97 fb       	bst	r25, 7
 1da:	07 2e       	mov	r0, r23
 1dc:	16 f4       	brtc	.+4      	; 0x1e2 <__divmodhi4+0xa>
 1de:	00 94       	com	r0
 1e0:	07 d0       	rcall	.+14     	; 0x1f0 <__divmodhi4_neg1>
 1e2:	77 fd       	sbrc	r23, 7
 1e4:	09 d0       	rcall	.+18     	; 0x1f8 <__divmodhi4_neg2>
 1e6:	0e 94 00 01 	call	0x200	; 0x200 <__udivmodhi4>
 1ea:	07 fc       	sbrc	r0, 7
 1ec:	05 d0       	rcall	.+10     	; 0x1f8 <__divmodhi4_neg2>
 1ee:	3e f4       	brtc	.+14     	; 0x1fe <__divmodhi4_exit>

000001f0 <__divmodhi4_neg1>:
 1f0:	90 95       	com	r25
 1f2:	81 95       	neg	r24
 1f4:	9f 4f       	sbci	r25, 0xFF	; 255
 1f6:	08 95       	ret

000001f8 <__divmodhi4_neg2>:
 1f8:	70 95       	com	r23
 1fa:	61 95       	neg	r22
 1fc:	7f 4f       	sbci	r23, 0xFF	; 255

000001fe <__divmodhi4_exit>:
 1fe:	08 95       	ret

00000200 <__udivmodhi4>:
 200:	aa 1b       	sub	r26, r26
 202:	bb 1b       	sub	r27, r27
 204:	51 e1       	ldi	r21, 0x11	; 17
 206:	07 c0       	rjmp	.+14     	; 0x216 <__udivmodhi4_ep>

00000208 <__udivmodhi4_loop>:
 208:	aa 1f       	adc	r26, r26
 20a:	bb 1f       	adc	r27, r27
 20c:	a6 17       	cp	r26, r22
 20e:	b7 07       	cpc	r27, r23
 210:	10 f0       	brcs	.+4      	; 0x216 <__udivmodhi4_ep>
 212:	a6 1b       	sub	r26, r22
 214:	b7 0b       	sbc	r27, r23

00000216 <__udivmodhi4_ep>:
 216:	88 1f       	adc	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	5a 95       	dec	r21
 21c:	a9 f7       	brne	.-22     	; 0x208 <__udivmodhi4_loop>
 21e:	80 95       	com	r24
 220:	90 95       	com	r25
 222:	bc 01       	movw	r22, r24
 224:	cd 01       	movw	r24, r26
 226:	08 95       	ret

00000228 <_exit>:
 228:	f8 94       	cli

0000022a <__stop_program>:
 22a:	ff cf       	rjmp	.-2      	; 0x22a <__stop_program>
