
Aufgabe1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  00000254  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000197  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000010b  00000000  00000000  0000044b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000018c  00000000  00000000  00000556  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000064  00000000  00000000  000006e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001c3  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000e0  00000000  00000000  0000090b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000009eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  88:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_1>:
#include <stdint.h>
#include <util/delay.h>

uint8_t buttonStates = 0;	//0: Reset, (1: Start (inactive))
uint8_t timerEnabled = 0;
ISR(INT0_vect) { timerEnabled = 1; }
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	80 93 00 01 	sts	0x0100, r24
  a2:	8f 91       	pop	r24
  a4:	0f 90       	pop	r0
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	0f 90       	pop	r0
  aa:	1f 90       	pop	r1
  ac:	18 95       	reti

000000ae <__vector_4>:

ISR(PCINT1_vect) { buttonStates |= 1 << 0; }
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	80 91 01 01 	lds	r24, 0x0101
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	80 93 01 01 	sts	0x0101, r24
  c4:	8f 91       	pop	r24
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <main>:

	uint8_t switchStates = 0;	//0: 2^0, 1: 2^1, 2: 2^2
	uint8_t mask = 0b00000111; // Create mask for the first 3 bits
	uint8_t maxCounter = 0;
	uint8_t counter = maxCounter;
	DDRC |= (1 << DDC2) | (1 << DDC1) | (1 << DDC0);										// LED Outputs
  d0:	87 b1       	in	r24, 0x07	; 7
  d2:	87 60       	ori	r24, 0x07	; 7
  d4:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC3);																	// Reset Button Pull-up
  d6:	43 9a       	sbi	0x08, 3	; 8
	PORTD |= (1 << PORTD2) | (1 << PORTD5) | (1 << PORTD6) | (1 << PORTD7);					// Start Button / Switches Pull-ups
  d8:	8b b1       	in	r24, 0x0b	; 11
  da:	84 6e       	ori	r24, 0xE4	; 228
  dc:	8b b9       	out	0x0b, r24	; 11
	
	//INT0 setup
	EICRA &= ~((1<<ISC01)|(1<<ISC00));
  de:	e9 e6       	ldi	r30, 0x69	; 105
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	8c 7f       	andi	r24, 0xFC	; 252
  e6:	80 83       	st	Z, r24
	EICRA |= (1<<ISC01);
  e8:	80 81       	ld	r24, Z
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);
  ee:	e8 9a       	sbi	0x1d, 0	; 29
	
	//PCINT1 setup
	PCICR &= ~((1<<PCIE2)|(1<<PCIE1)|(1<<PCIE2));
  f0:	e8 e6       	ldi	r30, 0x68	; 104
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	89 7f       	andi	r24, 0xF9	; 249
  f8:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE1);
  fa:	80 81       	ld	r24, Z
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT11);
 100:	ec e6       	ldi	r30, 0x6C	; 108
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	88 60       	ori	r24, 0x08	; 8
 108:	80 83       	st	Z, r24
	
	sei();
 10a:	78 94       	sei

int main(void) {

	uint8_t switchStates = 0;	//0: 2^0, 1: 2^1, 2: 2^2
	uint8_t mask = 0b00000111; // Create mask for the first 3 bits
	uint8_t maxCounter = 0;
 10c:	f0 e0       	ldi	r31, 0x00	; 0

ISR(PCINT1_vect) { buttonStates |= 1 << 0; }

int main(void) {

	uint8_t switchStates = 0;	//0: 2^0, 1: 2^1, 2: 2^2
 10e:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(1) {
		
		if (counter <= 0) counter = maxCounter;
		if(timerEnabled) counter--;
		PORTC = (PORTC & ~mask) | ~((counter - 1) / 10);
 110:	2a e0       	ldi	r18, 0x0A	; 10
 112:	30 e0       	ldi	r19, 0x00	; 0

ISR(PCINT1_vect) { buttonStates |= 1 << 0; }

int main(void) {

	uint8_t switchStates = 0;	//0: 2^0, 1: 2^1, 2: 2^2
 114:	4f 2f       	mov	r20, r31
	
	sei();
	
	while(1) {
		
		if (counter <= 0) counter = maxCounter;
 116:	41 11       	cpse	r20, r1
 118:	01 c0       	rjmp	.+2      	; 0x11c <main+0x4c>
 11a:	4f 2f       	mov	r20, r31
		if(timerEnabled) counter--;
 11c:	80 91 00 01 	lds	r24, 0x0100
 120:	81 11       	cpse	r24, r1
 122:	41 50       	subi	r20, 0x01	; 1
		PORTC = (PORTC & ~mask) | ~((counter - 1) / 10);
 124:	e8 b1       	in	r30, 0x08	; 8
 126:	84 2f       	mov	r24, r20
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	b9 01       	movw	r22, r18
 12e:	0e 94 c6 00 	call	0x18c	; 0x18c <__divmodhi4>
 132:	60 95       	com	r22
 134:	e8 7f       	andi	r30, 0xF8	; 248
 136:	e6 2b       	or	r30, r22
 138:	e8 b9       	out	0x08, r30	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	5f ef       	ldi	r21, 0xFF	; 255
 13c:	81 ee       	ldi	r24, 0xE1	; 225
 13e:	94 e0       	ldi	r25, 0x04	; 4
 140:	51 50       	subi	r21, 0x01	; 1
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x70>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x7a>
 14a:	00 00       	nop
		_delay_ms(100);
		
		// Reset Counter and Stop
		if (buttonStates & (1 << 0)) {
 14c:	80 91 01 01 	lds	r24, 0x0101
 150:	80 ff       	sbrs	r24, 0
 152:	e1 cf       	rjmp	.-62     	; 0x116 <main+0x46>
			if (PIND & (1 << PIND5)) switchStates |= 1 << 0;
 154:	4d 9b       	sbis	0x09, 5	; 9
 156:	02 c0       	rjmp	.+4      	; 0x15c <main+0x8c>
 158:	c1 60       	ori	r28, 0x01	; 1
 15a:	01 c0       	rjmp	.+2      	; 0x15e <main+0x8e>
			else switchStates &= ~(1 << 0);
 15c:	ce 7f       	andi	r28, 0xFE	; 254
			if (PIND & (1 << PIND6)) switchStates |= 1 << 1;
 15e:	4e 9b       	sbis	0x09, 6	; 9
 160:	02 c0       	rjmp	.+4      	; 0x166 <main+0x96>
 162:	c2 60       	ori	r28, 0x02	; 2
 164:	01 c0       	rjmp	.+2      	; 0x168 <main+0x98>
			else switchStates &= ~(1 << 1);
 166:	cd 7f       	andi	r28, 0xFD	; 253
			if (PIND & (1 << PIND7)) switchStates |= 1 << 2;
 168:	4f 9b       	sbis	0x09, 7	; 9
 16a:	02 c0       	rjmp	.+4      	; 0x170 <main+0xa0>
 16c:	c4 60       	ori	r28, 0x04	; 4
 16e:	01 c0       	rjmp	.+2      	; 0x172 <main+0xa2>
			else switchStates &= ~(1 << 2);
 170:	cb 7f       	andi	r28, 0xFB	; 251
			maxCounter = (switchStates*10)+10;
 172:	fc 2f       	mov	r31, r28
 174:	ff 0f       	add	r31, r31
 176:	fe 5f       	subi	r31, 0xFE	; 254
 178:	9f 2f       	mov	r25, r31
 17a:	99 0f       	add	r25, r25
 17c:	99 0f       	add	r25, r25
 17e:	f9 0f       	add	r31, r25
			buttonStates &= ~(1 << 0);
 180:	8e 7f       	andi	r24, 0xFE	; 254
 182:	80 93 01 01 	sts	0x0101, r24
			counter = maxCounter;
			timerEnabled = 0;
 186:	10 92 00 01 	sts	0x0100, r1
 18a:	c4 cf       	rjmp	.-120    	; 0x114 <main+0x44>

0000018c <__divmodhi4>:
 18c:	97 fb       	bst	r25, 7
 18e:	07 2e       	mov	r0, r23
 190:	16 f4       	brtc	.+4      	; 0x196 <__divmodhi4+0xa>
 192:	00 94       	com	r0
 194:	07 d0       	rcall	.+14     	; 0x1a4 <__divmodhi4_neg1>
 196:	77 fd       	sbrc	r23, 7
 198:	09 d0       	rcall	.+18     	; 0x1ac <__divmodhi4_neg2>
 19a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <__udivmodhi4>
 19e:	07 fc       	sbrc	r0, 7
 1a0:	05 d0       	rcall	.+10     	; 0x1ac <__divmodhi4_neg2>
 1a2:	3e f4       	brtc	.+14     	; 0x1b2 <__divmodhi4_exit>

000001a4 <__divmodhi4_neg1>:
 1a4:	90 95       	com	r25
 1a6:	81 95       	neg	r24
 1a8:	9f 4f       	sbci	r25, 0xFF	; 255
 1aa:	08 95       	ret

000001ac <__divmodhi4_neg2>:
 1ac:	70 95       	com	r23
 1ae:	61 95       	neg	r22
 1b0:	7f 4f       	sbci	r23, 0xFF	; 255

000001b2 <__divmodhi4_exit>:
 1b2:	08 95       	ret

000001b4 <__udivmodhi4>:
 1b4:	aa 1b       	sub	r26, r26
 1b6:	bb 1b       	sub	r27, r27
 1b8:	51 e1       	ldi	r21, 0x11	; 17
 1ba:	07 c0       	rjmp	.+14     	; 0x1ca <__udivmodhi4_ep>

000001bc <__udivmodhi4_loop>:
 1bc:	aa 1f       	adc	r26, r26
 1be:	bb 1f       	adc	r27, r27
 1c0:	a6 17       	cp	r26, r22
 1c2:	b7 07       	cpc	r27, r23
 1c4:	10 f0       	brcs	.+4      	; 0x1ca <__udivmodhi4_ep>
 1c6:	a6 1b       	sub	r26, r22
 1c8:	b7 0b       	sbc	r27, r23

000001ca <__udivmodhi4_ep>:
 1ca:	88 1f       	adc	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	5a 95       	dec	r21
 1d0:	a9 f7       	brne	.-22     	; 0x1bc <__udivmodhi4_loop>
 1d2:	80 95       	com	r24
 1d4:	90 95       	com	r25
 1d6:	bc 01       	movw	r22, r24
 1d8:	cd 01       	movw	r24, r26
 1da:	08 95       	ret

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
